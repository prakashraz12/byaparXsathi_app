/**
 * Generated by @openapi-codegen
 *
 * @version 1.0
 */
export type WithEmailDto = {
  /**
   * @example prakashraz@gmail.com
   */
  email: string;
};

export type LoginDto = {
  /**
   * @example prakashraz@gmail.com
   */
  email: string;
  /**
   * @example 123456
   */
  otp: string;
};

export type LoginWithOtpResponse = {
  fullName: string;
  email: string;
  role: string;
  id: number;
  phoneNumber: string;
  address: string;
  country: Record<string, any>;
  isDeleted: boolean;
  requestDeleteOn: Record<string, any>;
  /**
   * @format date-time
   */
  createdAt: string;
  /**
   * @format date-time
   */
  updatedAt: string;
  shops: string[];
};

export type PaginationDto = {
  page: number;
  size: number;
  total: number;
  hasNextPage: boolean;
};

export type TLoginWithOtpResponse = {
  statusCode: number;
  message: string;
  isSuccess: boolean;
  data?: LoginWithOtpResponse | null;
  pagination?: PaginationDto;
};

export type BillLayoutConfigDto = {
  /**
   * Date format to be used in bills
   */
  dateFormat: "AD" | "BS";
  /**
   * Default bill layout template
   */
  defaultBillLayout: "INVOICE" | "THERMAL";
  /**
   * Whether to show PAN number on the bill
   */
  showPanNumberOnBill: boolean;
  /**
   * Whether to show registration number on the bill
   */
  showRegNumberOnBill: boolean;
  /**
   * Enable QR code on the bill
   */
  enableQrOnBill: boolean;
  /**
   * Enable tax rate calculation on the bill
   */
  enableTaxRate: boolean;
};

export type MeasuringUnitDto = {
  /**
   * Label for the measuring unit (e.g., Kilogram, Liter)
   */
  label: string;
  /**
   * Whether the measuring unit is active
   */
  active: boolean;
  /**
   * Short form of the measuring unit (e.g., kg, l)
   */
  shortForm: string;
};

export type CreateShopDto = {
  /**
   * Name of the shop
   */
  shopName: string;
  /**
   * Physical address of the shop
   */
  shopAddress: string;
  /**
   * Contact phone number of the shop
   */
  shopPhoneNumber: string;
  /**
   * Email address of the shop
   */
  shopEmail: string;
  /**
   * Type of the shop
   */
  shopType:
    | "CLOTHING_STORE"
    | "JEWELRY_STORE"
    | "BAKERY"
    | "CAFE"
    | "RESTAURANT"
    | "GROCERY";
  /**
   * PAN number of the shop
   */
  shopPanNumber?: string;
  /**
   * Registration number of the shop
   */
  shopRegNumber?: string;
  /**
   * URL or path to the shop's payment QR code
   */
  shopPaymentQrCode?: string;
  /**
   * Configuration for bill layout
   */
  billLayoutConfig: BillLayoutConfigDto;
  /**
   * Status of the shop
   *
   * @default ACTIVE
   */
  status?: "ACTIVE" | "INACTIVE" | "SCHEDULED_FOR_DELETE";
  /**
   * List of measuring units used in the shop
   */
  measuringUnits?: MeasuringUnitDto[];
};

export type CreateSalesDto = {
  shopId: number;
  customerId: number;
  saleItems: string[];
  invoiceNumber: string;
  /**
   * @format date-time
   */
  invoiceDate: string;
  paymentType: string;
  status: string;
  discountAmount: number;
  taxAmount: number;
  subTotalAmount: number;
  additionalAmount: number;
  oldDueAmount: number;
  dueAmount: number;
  paidAmount: number;
  remarks: string;
  grandTotalAmount: number;
};

export type MeasurementUnitDto = {};

export type CreateItemDto = {
  /**
   * Name of the item
   */
  itemName: string;
  /**
   * Cost price of the item
   */
  costPrice: number;
  /**
   * Selling price of the item
   */
  sellingPrice: number;
  /**
   * Measurement unit details
   */
  measurementUnit: MeasurementUnitDto;
  /**
   * Whether stock tracking is enabled for this item
   */
  isStockEnabled: boolean;
  /**
   * Alert when stock reaches this level
   *
   * @default 0
   */
  lowStockAlert?: number;
  /**
   * Current stock level
   *
   * @default 0
   */
  currentStock?: number;
  /**
   * Initial stock level
   *
   * @default 0
   */
  openingStock?: number;
  /**
   * ID of the shop this item belongs to
   */
  shopId: number;
};
